# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigCustomRootNSBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_root_ns': 'list[ConfigRootNS]',
        'custom_root_ns_enabled': 'bool'
    }

    attribute_map = {
        'custom_root_ns': 'custom_root_ns',
        'custom_root_ns_enabled': 'custom_root_ns_enabled'
    }

    def __init__(self, custom_root_ns=None, custom_root_ns_enabled=None):  # noqa: E501
        """ConfigCustomRootNSBlock - a model defined in Swagger"""  # noqa: E501

        self._custom_root_ns = None
        self._custom_root_ns_enabled = None
        self.discriminator = None

        if custom_root_ns is not None:
            self.custom_root_ns = custom_root_ns
        if custom_root_ns_enabled is not None:
            self.custom_root_ns_enabled = custom_root_ns_enabled

    @property
    def custom_root_ns(self):
        """Gets the custom_root_ns of this ConfigCustomRootNSBlock.  # noqa: E501

        Optional. Field config for custom_root_ns field.  # noqa: E501

        :return: The custom_root_ns of this ConfigCustomRootNSBlock.  # noqa: E501
        :rtype: list[ConfigRootNS]
        """
        return self._custom_root_ns

    @custom_root_ns.setter
    def custom_root_ns(self, custom_root_ns):
        """Sets the custom_root_ns of this ConfigCustomRootNSBlock.

        Optional. Field config for custom_root_ns field.  # noqa: E501

        :param custom_root_ns: The custom_root_ns of this ConfigCustomRootNSBlock.  # noqa: E501
        :type: list[ConfigRootNS]
        """

        self._custom_root_ns = custom_root_ns

    @property
    def custom_root_ns_enabled(self):
        """Gets the custom_root_ns_enabled of this ConfigCustomRootNSBlock.  # noqa: E501

        Optional. Field config for custom_root_ns_enabled field.  # noqa: E501

        :return: The custom_root_ns_enabled of this ConfigCustomRootNSBlock.  # noqa: E501
        :rtype: bool
        """
        return self._custom_root_ns_enabled

    @custom_root_ns_enabled.setter
    def custom_root_ns_enabled(self, custom_root_ns_enabled):
        """Sets the custom_root_ns_enabled of this ConfigCustomRootNSBlock.

        Optional. Field config for custom_root_ns_enabled field.  # noqa: E501

        :param custom_root_ns_enabled: The custom_root_ns_enabled of this ConfigCustomRootNSBlock.  # noqa: E501
        :type: bool
        """

        self._custom_root_ns_enabled = custom_root_ns_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigCustomRootNSBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigCustomRootNSBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
