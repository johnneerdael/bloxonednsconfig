# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigACL(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'id': 'str',
        'list': 'list[ConfigACLItem]',
        'name': 'str',
        'tags': 'TypesJSONValue'
    }

    attribute_map = {
        'comment': 'comment',
        'id': 'id',
        'list': 'list',
        'name': 'name',
        'tags': 'tags'
    }

    def __init__(self, comment=None, id=None, list=None, name=None, tags=None):  # noqa: E501
        """ConfigACL - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._id = None
        self._list = None
        self._name = None
        self._tags = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if id is not None:
            self.id = id
        if list is not None:
            self.list = list
        self.name = name
        if tags is not None:
            self.tags = tags

    @property
    def comment(self):
        """Gets the comment of this ConfigACL.  # noqa: E501

        Optional. Comment for ACL.  # noqa: E501

        :return: The comment of this ConfigACL.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ConfigACL.

        Optional. Comment for ACL.  # noqa: E501

        :param comment: The comment of this ConfigACL.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this ConfigACL.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this ConfigACL.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigACL.

        The resource identifier.  # noqa: E501

        :param id: The id of this ConfigACL.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def list(self):
        """Gets the list of this ConfigACL.  # noqa: E501

        Optional. Ordered list of access control elements. Elements are evaluated in order to determine access. If evaluation reaches the end of the list then access is denied.  # noqa: E501

        :return: The list of this ConfigACL.  # noqa: E501
        :rtype: list[ConfigACLItem]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this ConfigACL.

        Optional. Ordered list of access control elements. Elements are evaluated in order to determine access. If evaluation reaches the end of the list then access is denied.  # noqa: E501

        :param list: The list of this ConfigACL.  # noqa: E501
        :type: list[ConfigACLItem]
        """

        self._list = list

    @property
    def name(self):
        """Gets the name of this ConfigACL.  # noqa: E501

        Required. ACL object name.  # noqa: E501

        :return: The name of this ConfigACL.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigACL.

        Required. ACL object name.  # noqa: E501

        :param name: The name of this ConfigACL.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this ConfigACL.  # noqa: E501


        :return: The tags of this ConfigACL.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ConfigACL.


        :param tags: The tags of this ConfigACL.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigACL, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigACL):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
