# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigTrustAnchor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algorithm': 'int',
        'protocol_zone': 'str',
        'public_key': 'str',
        'sep': 'bool',
        'zone': 'str'
    }

    attribute_map = {
        'algorithm': 'algorithm',
        'protocol_zone': 'protocol_zone',
        'public_key': 'public_key',
        'sep': 'sep',
        'zone': 'zone'
    }

    def __init__(self, algorithm=None, protocol_zone=None, public_key=None, sep=None, zone=None):  # noqa: E501
        """ConfigTrustAnchor - a model defined in Swagger"""  # noqa: E501

        self._algorithm = None
        self._protocol_zone = None
        self._public_key = None
        self._sep = None
        self._zone = None
        self.discriminator = None

        self.algorithm = algorithm
        if protocol_zone is not None:
            self.protocol_zone = protocol_zone
        self.public_key = public_key
        if sep is not None:
            self.sep = sep
        self.zone = zone

    @property
    def algorithm(self):
        """Gets the algorithm of this ConfigTrustAnchor.  # noqa: E501


        :return: The algorithm of this ConfigTrustAnchor.  # noqa: E501
        :rtype: int
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this ConfigTrustAnchor.


        :param algorithm: The algorithm of this ConfigTrustAnchor.  # noqa: E501
        :type: int
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")  # noqa: E501

        self._algorithm = algorithm

    @property
    def protocol_zone(self):
        """Gets the protocol_zone of this ConfigTrustAnchor.  # noqa: E501

        Read only. Zone FQDN in punycode.  # noqa: E501

        :return: The protocol_zone of this ConfigTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._protocol_zone

    @protocol_zone.setter
    def protocol_zone(self, protocol_zone):
        """Sets the protocol_zone of this ConfigTrustAnchor.

        Read only. Zone FQDN in punycode.  # noqa: E501

        :param protocol_zone: The protocol_zone of this ConfigTrustAnchor.  # noqa: E501
        :type: str
        """

        self._protocol_zone = protocol_zone

    @property
    def public_key(self):
        """Gets the public_key of this ConfigTrustAnchor.  # noqa: E501

        Required. DNSSEC key data. Non-empty, valid base64 string.  # noqa: E501

        :return: The public_key of this ConfigTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ConfigTrustAnchor.

        Required. DNSSEC key data. Non-empty, valid base64 string.  # noqa: E501

        :param public_key: The public_key of this ConfigTrustAnchor.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def sep(self):
        """Gets the sep of this ConfigTrustAnchor.  # noqa: E501

        Optional. Secure Entry Point flag. Defaults to true.  # noqa: E501

        :return: The sep of this ConfigTrustAnchor.  # noqa: E501
        :rtype: bool
        """
        return self._sep

    @sep.setter
    def sep(self, sep):
        """Sets the sep of this ConfigTrustAnchor.

        Optional. Secure Entry Point flag. Defaults to true.  # noqa: E501

        :param sep: The sep of this ConfigTrustAnchor.  # noqa: E501
        :type: bool
        """

        self._sep = sep

    @property
    def zone(self):
        """Gets the zone of this ConfigTrustAnchor.  # noqa: E501

        Required. Zone FQDN.  # noqa: E501

        :return: The zone of this ConfigTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ConfigTrustAnchor.

        Required. Zone FQDN.  # noqa: E501

        :param zone: The zone of this ConfigTrustAnchor.  # noqa: E501
        :type: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")  # noqa: E501

        self._zone = zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigTrustAnchor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigTrustAnchor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
