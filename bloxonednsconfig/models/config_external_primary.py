# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigExternalPrimary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'fqdn': 'str',
        'nsg': 'str',
        'protocol_fqdn': 'str',
        'protocol_tsig_key_name': 'str',
        'tsig_enabled': 'bool',
        'tsig_key_algo': 'str',
        'tsig_key_data': 'str',
        'tsig_key_name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'address': 'address',
        'fqdn': 'fqdn',
        'nsg': 'nsg',
        'protocol_fqdn': 'protocol_fqdn',
        'protocol_tsig_key_name': 'protocol_tsig_key_name',
        'tsig_enabled': 'tsig_enabled',
        'tsig_key_algo': 'tsig_key_algo',
        'tsig_key_data': 'tsig_key_data',
        'tsig_key_name': 'tsig_key_name',
        'type': 'type'
    }

    def __init__(self, address=None, fqdn=None, nsg=None, protocol_fqdn=None, protocol_tsig_key_name=None, tsig_enabled=None, tsig_key_algo=None, tsig_key_data=None, tsig_key_name=None, type=None):  # noqa: E501
        """ConfigExternalPrimary - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._fqdn = None
        self._nsg = None
        self._protocol_fqdn = None
        self._protocol_tsig_key_name = None
        self._tsig_enabled = None
        self._tsig_key_algo = None
        self._tsig_key_data = None
        self._tsig_key_name = None
        self._type = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if fqdn is not None:
            self.fqdn = fqdn
        if nsg is not None:
            self.nsg = nsg
        if protocol_fqdn is not None:
            self.protocol_fqdn = protocol_fqdn
        if protocol_tsig_key_name is not None:
            self.protocol_tsig_key_name = protocol_tsig_key_name
        if tsig_enabled is not None:
            self.tsig_enabled = tsig_enabled
        if tsig_key_algo is not None:
            self.tsig_key_algo = tsig_key_algo
        if tsig_key_data is not None:
            self.tsig_key_data = tsig_key_data
        if tsig_key_name is not None:
            self.tsig_key_name = tsig_key_name
        self.type = type

    @property
    def address(self):
        """Gets the address of this ConfigExternalPrimary.  # noqa: E501

        Optional. Required only if type is \"server\". IP Address of nameserver.  # noqa: E501

        :return: The address of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConfigExternalPrimary.

        Optional. Required only if type is \"server\". IP Address of nameserver.  # noqa: E501

        :param address: The address of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def fqdn(self):
        """Gets the fqdn of this ConfigExternalPrimary.  # noqa: E501

        Optional. Required only if type is \"server\". FQDN of nameserver.  # noqa: E501

        :return: The fqdn of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ConfigExternalPrimary.

        Optional. Required only if type is \"server\". FQDN of nameserver.  # noqa: E501

        :param fqdn: The fqdn of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def nsg(self):
        """Gets the nsg of this ConfigExternalPrimary.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The nsg of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._nsg

    @nsg.setter
    def nsg(self, nsg):
        """Sets the nsg of this ConfigExternalPrimary.

        The resource identifier.  # noqa: E501

        :param nsg: The nsg of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """

        self._nsg = nsg

    @property
    def protocol_fqdn(self):
        """Gets the protocol_fqdn of this ConfigExternalPrimary.  # noqa: E501

        Read only. TSIG key's DNS name (FQDN) in punycode.  # noqa: E501

        :return: The protocol_fqdn of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._protocol_fqdn

    @protocol_fqdn.setter
    def protocol_fqdn(self, protocol_fqdn):
        """Sets the protocol_fqdn of this ConfigExternalPrimary.

        Read only. TSIG key's DNS name (FQDN) in punycode.  # noqa: E501

        :param protocol_fqdn: The protocol_fqdn of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """

        self._protocol_fqdn = protocol_fqdn

    @property
    def protocol_tsig_key_name(self):
        """Gets the protocol_tsig_key_name of this ConfigExternalPrimary.  # noqa: E501

        Read only. FQDN of nameserver in punycode.  # noqa: E501

        :return: The protocol_tsig_key_name of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._protocol_tsig_key_name

    @protocol_tsig_key_name.setter
    def protocol_tsig_key_name(self, protocol_tsig_key_name):
        """Sets the protocol_tsig_key_name of this ConfigExternalPrimary.

        Read only. FQDN of nameserver in punycode.  # noqa: E501

        :param protocol_tsig_key_name: The protocol_tsig_key_name of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """

        self._protocol_tsig_key_name = protocol_tsig_key_name

    @property
    def tsig_enabled(self):
        """Gets the tsig_enabled of this ConfigExternalPrimary.  # noqa: E501

        Optional. If enabled, secondaries will use the configured TSIG key when requesting a zone transfer from this primary.  # noqa: E501

        :return: The tsig_enabled of this ConfigExternalPrimary.  # noqa: E501
        :rtype: bool
        """
        return self._tsig_enabled

    @tsig_enabled.setter
    def tsig_enabled(self, tsig_enabled):
        """Sets the tsig_enabled of this ConfigExternalPrimary.

        Optional. If enabled, secondaries will use the configured TSIG key when requesting a zone transfer from this primary.  # noqa: E501

        :param tsig_enabled: The tsig_enabled of this ConfigExternalPrimary.  # noqa: E501
        :type: bool
        """

        self._tsig_enabled = tsig_enabled

    @property
    def tsig_key_algo(self):
        """Gets the tsig_key_algo of this ConfigExternalPrimary.  # noqa: E501

        Optional. TSIG key algorithm. Allowed values: - hmac_md5 - hmac_sha1 - hmac_sha224 - hmac_sha256 - hmac_sha384 - hmac_sha512 Defaults to hmac_sha256.  # noqa: E501

        :return: The tsig_key_algo of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._tsig_key_algo

    @tsig_key_algo.setter
    def tsig_key_algo(self, tsig_key_algo):
        """Sets the tsig_key_algo of this ConfigExternalPrimary.

        Optional. TSIG key algorithm. Allowed values: - hmac_md5 - hmac_sha1 - hmac_sha224 - hmac_sha256 - hmac_sha384 - hmac_sha512 Defaults to hmac_sha256.  # noqa: E501

        :param tsig_key_algo: The tsig_key_algo of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """

        self._tsig_key_algo = tsig_key_algo

    @property
    def tsig_key_data(self):
        """Gets the tsig_key_data of this ConfigExternalPrimary.  # noqa: E501

        Optional. TSIG key data. Error if empty while tsig_enabled is true.  # noqa: E501

        :return: The tsig_key_data of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._tsig_key_data

    @tsig_key_data.setter
    def tsig_key_data(self, tsig_key_data):
        """Sets the tsig_key_data of this ConfigExternalPrimary.

        Optional. TSIG key data. Error if empty while tsig_enabled is true.  # noqa: E501

        :param tsig_key_data: The tsig_key_data of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """

        self._tsig_key_data = tsig_key_data

    @property
    def tsig_key_name(self):
        """Gets the tsig_key_name of this ConfigExternalPrimary.  # noqa: E501

        Optional. TSIG key's DNS name (FQDN). Error if empty while tsig_enabled is true.  # noqa: E501

        :return: The tsig_key_name of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._tsig_key_name

    @tsig_key_name.setter
    def tsig_key_name(self, tsig_key_name):
        """Sets the tsig_key_name of this ConfigExternalPrimary.

        Optional. TSIG key's DNS name (FQDN). Error if empty while tsig_enabled is true.  # noqa: E501

        :param tsig_key_name: The tsig_key_name of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """

        self._tsig_key_name = tsig_key_name

    @property
    def type(self):
        """Gets the type of this ConfigExternalPrimary.  # noqa: E501


        :return: The type of this ConfigExternalPrimary.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigExternalPrimary.


        :param type: The type of this ConfigExternalPrimary.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigExternalPrimary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigExternalPrimary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
