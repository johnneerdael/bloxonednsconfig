# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigAuthZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'disabled': 'bool',
        'external_primaries': 'list[ConfigExternalPrimary]',
        'fqdn': 'str',
        'id': 'str',
        'inheritance_assigned_hosts': 'list[Inheritance2AssignedHost]',
        'inheritance_sources': 'ConfigAuthZoneInheritance',
        'initial_soa_serial': 'int',
        'internal_secondaries': 'list[ConfigInternalSecondary]',
        'mapped_subnet': 'str',
        'mapping': 'str',
        'nsgs': 'list[str]',
        'parent': 'str',
        'primary_type': 'str',
        'protocol_fqdn': 'str',
        'query_acl': 'list[ConfigACLItem]',
        'tags': 'TypesJSONValue',
        'transfer_acl': 'list[ConfigACLItem]',
        'update_acl': 'list[ConfigACLItem]',
        'use_forwarders_for_subzones': 'bool',
        'view': 'str',
        'zone_authority': 'ConfigZoneAuthority'
    }

    attribute_map = {
        'comment': 'comment',
        'disabled': 'disabled',
        'external_primaries': 'external_primaries',
        'fqdn': 'fqdn',
        'id': 'id',
        'inheritance_assigned_hosts': 'inheritance_assigned_hosts',
        'inheritance_sources': 'inheritance_sources',
        'initial_soa_serial': 'initial_soa_serial',
        'internal_secondaries': 'internal_secondaries',
        'mapped_subnet': 'mapped_subnet',
        'mapping': 'mapping',
        'nsgs': 'nsgs',
        'parent': 'parent',
        'primary_type': 'primary_type',
        'protocol_fqdn': 'protocol_fqdn',
        'query_acl': 'query_acl',
        'tags': 'tags',
        'transfer_acl': 'transfer_acl',
        'update_acl': 'update_acl',
        'use_forwarders_for_subzones': 'use_forwarders_for_subzones',
        'view': 'view',
        'zone_authority': 'zone_authority'
    }

    def __init__(self, comment=None, disabled=None, external_primaries=None, fqdn=None, id=None, inheritance_assigned_hosts=None, inheritance_sources=None, initial_soa_serial=None, internal_secondaries=None, mapped_subnet=None, mapping=None, nsgs=None, parent=None, primary_type=None, protocol_fqdn=None, query_acl=None, tags=None, transfer_acl=None, update_acl=None, use_forwarders_for_subzones=None, view=None, zone_authority=None):  # noqa: E501
        """ConfigAuthZone - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._disabled = None
        self._external_primaries = None
        self._fqdn = None
        self._id = None
        self._inheritance_assigned_hosts = None
        self._inheritance_sources = None
        self._initial_soa_serial = None
        self._internal_secondaries = None
        self._mapped_subnet = None
        self._mapping = None
        self._nsgs = None
        self._parent = None
        self._primary_type = None
        self._protocol_fqdn = None
        self._query_acl = None
        self._tags = None
        self._transfer_acl = None
        self._update_acl = None
        self._use_forwarders_for_subzones = None
        self._view = None
        self._zone_authority = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if disabled is not None:
            self.disabled = disabled
        if external_primaries is not None:
            self.external_primaries = external_primaries
        self.fqdn = fqdn
        if id is not None:
            self.id = id
        if inheritance_assigned_hosts is not None:
            self.inheritance_assigned_hosts = inheritance_assigned_hosts
        if inheritance_sources is not None:
            self.inheritance_sources = inheritance_sources
        if initial_soa_serial is not None:
            self.initial_soa_serial = initial_soa_serial
        if internal_secondaries is not None:
            self.internal_secondaries = internal_secondaries
        if mapped_subnet is not None:
            self.mapped_subnet = mapped_subnet
        if mapping is not None:
            self.mapping = mapping
        if nsgs is not None:
            self.nsgs = nsgs
        if parent is not None:
            self.parent = parent
        self.primary_type = primary_type
        if protocol_fqdn is not None:
            self.protocol_fqdn = protocol_fqdn
        if query_acl is not None:
            self.query_acl = query_acl
        if tags is not None:
            self.tags = tags
        if transfer_acl is not None:
            self.transfer_acl = transfer_acl
        if update_acl is not None:
            self.update_acl = update_acl
        if use_forwarders_for_subzones is not None:
            self.use_forwarders_for_subzones = use_forwarders_for_subzones
        if view is not None:
            self.view = view
        if zone_authority is not None:
            self.zone_authority = zone_authority

    @property
    def comment(self):
        """Gets the comment of this ConfigAuthZone.  # noqa: E501

        Optional. Comment for zone configuration.  # noqa: E501

        :return: The comment of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ConfigAuthZone.

        Optional. Comment for zone configuration.  # noqa: E501

        :param comment: The comment of this ConfigAuthZone.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def disabled(self):
        """Gets the disabled of this ConfigAuthZone.  # noqa: E501

        Optional. True to disable object. A disabled object is effectively non-existent when generating configuration.  # noqa: E501

        :return: The disabled of this ConfigAuthZone.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ConfigAuthZone.

        Optional. True to disable object. A disabled object is effectively non-existent when generating configuration.  # noqa: E501

        :param disabled: The disabled of this ConfigAuthZone.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def external_primaries(self):
        """Gets the external_primaries of this ConfigAuthZone.  # noqa: E501

        Optional. DNS primaries external to BloxOne DDI. Order is not significant.  # noqa: E501

        :return: The external_primaries of this ConfigAuthZone.  # noqa: E501
        :rtype: list[ConfigExternalPrimary]
        """
        return self._external_primaries

    @external_primaries.setter
    def external_primaries(self, external_primaries):
        """Sets the external_primaries of this ConfigAuthZone.

        Optional. DNS primaries external to BloxOne DDI. Order is not significant.  # noqa: E501

        :param external_primaries: The external_primaries of this ConfigAuthZone.  # noqa: E501
        :type: list[ConfigExternalPrimary]
        """

        self._external_primaries = external_primaries

    @property
    def fqdn(self):
        """Gets the fqdn of this ConfigAuthZone.  # noqa: E501

        Required. Zone FQDN. The FQDN supplied at creation will be converted to canonical form. Read-only after creation.  # noqa: E501

        :return: The fqdn of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ConfigAuthZone.

        Required. Zone FQDN. The FQDN supplied at creation will be converted to canonical form. Read-only after creation.  # noqa: E501

        :param fqdn: The fqdn of this ConfigAuthZone.  # noqa: E501
        :type: str
        """
        if fqdn is None:
            raise ValueError("Invalid value for `fqdn`, must not be `None`")  # noqa: E501

        self._fqdn = fqdn

    @property
    def id(self):
        """Gets the id of this ConfigAuthZone.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigAuthZone.

        The resource identifier.  # noqa: E501

        :param id: The id of this ConfigAuthZone.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inheritance_assigned_hosts(self):
        """Gets the inheritance_assigned_hosts of this ConfigAuthZone.  # noqa: E501

        Read-only. The list of the inheritance assigned hosts of the object.  # noqa: E501

        :return: The inheritance_assigned_hosts of this ConfigAuthZone.  # noqa: E501
        :rtype: list[Inheritance2AssignedHost]
        """
        return self._inheritance_assigned_hosts

    @inheritance_assigned_hosts.setter
    def inheritance_assigned_hosts(self, inheritance_assigned_hosts):
        """Sets the inheritance_assigned_hosts of this ConfigAuthZone.

        Read-only. The list of the inheritance assigned hosts of the object.  # noqa: E501

        :param inheritance_assigned_hosts: The inheritance_assigned_hosts of this ConfigAuthZone.  # noqa: E501
        :type: list[Inheritance2AssignedHost]
        """

        self._inheritance_assigned_hosts = inheritance_assigned_hosts

    @property
    def inheritance_sources(self):
        """Gets the inheritance_sources of this ConfigAuthZone.  # noqa: E501


        :return: The inheritance_sources of this ConfigAuthZone.  # noqa: E501
        :rtype: ConfigAuthZoneInheritance
        """
        return self._inheritance_sources

    @inheritance_sources.setter
    def inheritance_sources(self, inheritance_sources):
        """Sets the inheritance_sources of this ConfigAuthZone.


        :param inheritance_sources: The inheritance_sources of this ConfigAuthZone.  # noqa: E501
        :type: ConfigAuthZoneInheritance
        """

        self._inheritance_sources = inheritance_sources

    @property
    def initial_soa_serial(self):
        """Gets the initial_soa_serial of this ConfigAuthZone.  # noqa: E501

        On-create-only. SOA serial is allowed to be set when the auth zone is created.  # noqa: E501

        :return: The initial_soa_serial of this ConfigAuthZone.  # noqa: E501
        :rtype: int
        """
        return self._initial_soa_serial

    @initial_soa_serial.setter
    def initial_soa_serial(self, initial_soa_serial):
        """Sets the initial_soa_serial of this ConfigAuthZone.

        On-create-only. SOA serial is allowed to be set when the auth zone is created.  # noqa: E501

        :param initial_soa_serial: The initial_soa_serial of this ConfigAuthZone.  # noqa: E501
        :type: int
        """

        self._initial_soa_serial = initial_soa_serial

    @property
    def internal_secondaries(self):
        """Gets the internal_secondaries of this ConfigAuthZone.  # noqa: E501

        Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.  # noqa: E501

        :return: The internal_secondaries of this ConfigAuthZone.  # noqa: E501
        :rtype: list[ConfigInternalSecondary]
        """
        return self._internal_secondaries

    @internal_secondaries.setter
    def internal_secondaries(self, internal_secondaries):
        """Sets the internal_secondaries of this ConfigAuthZone.

        Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.  # noqa: E501

        :param internal_secondaries: The internal_secondaries of this ConfigAuthZone.  # noqa: E501
        :type: list[ConfigInternalSecondary]
        """

        self._internal_secondaries = internal_secondaries

    @property
    def mapped_subnet(self):
        """Gets the mapped_subnet of this ConfigAuthZone.  # noqa: E501

        Read-only. Reverse zone network address in the following format: <ip-address>/<cidr>. Defaults to empty.  # noqa: E501

        :return: The mapped_subnet of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._mapped_subnet

    @mapped_subnet.setter
    def mapped_subnet(self, mapped_subnet):
        """Sets the mapped_subnet of this ConfigAuthZone.

        Read-only. Reverse zone network address in the following format: <ip-address>/<cidr>. Defaults to empty.  # noqa: E501

        :param mapped_subnet: The mapped_subnet of this ConfigAuthZone.  # noqa: E501
        :type: str
        """

        self._mapped_subnet = mapped_subnet

    @property
    def mapping(self):
        """Gets the mapping of this ConfigAuthZone.  # noqa: E501

        Read-only. Zone mapping type. Allowed values: - forward - ipv4_reverse Defaults to forward.  # noqa: E501

        :return: The mapping of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this ConfigAuthZone.

        Read-only. Zone mapping type. Allowed values: - forward - ipv4_reverse Defaults to forward.  # noqa: E501

        :param mapping: The mapping of this ConfigAuthZone.  # noqa: E501
        :type: str
        """

        self._mapping = mapping

    @property
    def nsgs(self):
        """Gets the nsgs of this ConfigAuthZone.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The nsgs of this ConfigAuthZone.  # noqa: E501
        :rtype: list[str]
        """
        return self._nsgs

    @nsgs.setter
    def nsgs(self, nsgs):
        """Sets the nsgs of this ConfigAuthZone.

        The resource identifier.  # noqa: E501

        :param nsgs: The nsgs of this ConfigAuthZone.  # noqa: E501
        :type: list[str]
        """

        self._nsgs = nsgs

    @property
    def parent(self):
        """Gets the parent of this ConfigAuthZone.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The parent of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ConfigAuthZone.

        The resource identifier.  # noqa: E501

        :param parent: The parent of this ConfigAuthZone.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def primary_type(self):
        """Gets the primary_type of this ConfigAuthZone.  # noqa: E501

        Required. Primary type for an auth zone. Read only after creation. Allowed values: - external: zone data owned by some external to IB nameserver. - cloud: zone data is owned by N* cloud.  # noqa: E501

        :return: The primary_type of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._primary_type

    @primary_type.setter
    def primary_type(self, primary_type):
        """Sets the primary_type of this ConfigAuthZone.

        Required. Primary type for an auth zone. Read only after creation. Allowed values: - external: zone data owned by some external to IB nameserver. - cloud: zone data is owned by N* cloud.  # noqa: E501

        :param primary_type: The primary_type of this ConfigAuthZone.  # noqa: E501
        :type: str
        """
        if primary_type is None:
            raise ValueError("Invalid value for `primary_type`, must not be `None`")  # noqa: E501

        self._primary_type = primary_type

    @property
    def protocol_fqdn(self):
        """Gets the protocol_fqdn of this ConfigAuthZone.  # noqa: E501

        Read only. Zone FQDN in punycode.  # noqa: E501

        :return: The protocol_fqdn of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._protocol_fqdn

    @protocol_fqdn.setter
    def protocol_fqdn(self, protocol_fqdn):
        """Sets the protocol_fqdn of this ConfigAuthZone.

        Read only. Zone FQDN in punycode.  # noqa: E501

        :param protocol_fqdn: The protocol_fqdn of this ConfigAuthZone.  # noqa: E501
        :type: str
        """

        self._protocol_fqdn = protocol_fqdn

    @property
    def query_acl(self):
        """Gets the query_acl of this ConfigAuthZone.  # noqa: E501

        Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is unset. Defaults to empty.  # noqa: E501

        :return: The query_acl of this ConfigAuthZone.  # noqa: E501
        :rtype: list[ConfigACLItem]
        """
        return self._query_acl

    @query_acl.setter
    def query_acl(self, query_acl):
        """Sets the query_acl of this ConfigAuthZone.

        Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is unset. Defaults to empty.  # noqa: E501

        :param query_acl: The query_acl of this ConfigAuthZone.  # noqa: E501
        :type: list[ConfigACLItem]
        """

        self._query_acl = query_acl

    @property
    def tags(self):
        """Gets the tags of this ConfigAuthZone.  # noqa: E501

        Tagging specifics.  # noqa: E501

        :return: The tags of this ConfigAuthZone.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ConfigAuthZone.

        Tagging specifics.  # noqa: E501

        :param tags: The tags of this ConfigAuthZone.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    @property
    def transfer_acl(self):
        """Gets the transfer_acl of this ConfigAuthZone.  # noqa: E501


        :return: The transfer_acl of this ConfigAuthZone.  # noqa: E501
        :rtype: list[ConfigACLItem]
        """
        return self._transfer_acl

    @transfer_acl.setter
    def transfer_acl(self, transfer_acl):
        """Sets the transfer_acl of this ConfigAuthZone.


        :param transfer_acl: The transfer_acl of this ConfigAuthZone.  # noqa: E501
        :type: list[ConfigACLItem]
        """

        self._transfer_acl = transfer_acl

    @property
    def update_acl(self):
        """Gets the update_acl of this ConfigAuthZone.  # noqa: E501

        Optional. Specifies which hosts are allowed to submit Dynamic DNS updates for auth zones of primary_type \"cloud\". Defaults to empty.  # noqa: E501

        :return: The update_acl of this ConfigAuthZone.  # noqa: E501
        :rtype: list[ConfigACLItem]
        """
        return self._update_acl

    @update_acl.setter
    def update_acl(self, update_acl):
        """Sets the update_acl of this ConfigAuthZone.

        Optional. Specifies which hosts are allowed to submit Dynamic DNS updates for auth zones of primary_type \"cloud\". Defaults to empty.  # noqa: E501

        :param update_acl: The update_acl of this ConfigAuthZone.  # noqa: E501
        :type: list[ConfigACLItem]
        """

        self._update_acl = update_acl

    @property
    def use_forwarders_for_subzones(self):
        """Gets the use_forwarders_for_subzones of this ConfigAuthZone.  # noqa: E501

        Optional. Use default forwarders to resolve queries for subzones. Defaults to true.  # noqa: E501

        :return: The use_forwarders_for_subzones of this ConfigAuthZone.  # noqa: E501
        :rtype: bool
        """
        return self._use_forwarders_for_subzones

    @use_forwarders_for_subzones.setter
    def use_forwarders_for_subzones(self, use_forwarders_for_subzones):
        """Sets the use_forwarders_for_subzones of this ConfigAuthZone.

        Optional. Use default forwarders to resolve queries for subzones. Defaults to true.  # noqa: E501

        :param use_forwarders_for_subzones: The use_forwarders_for_subzones of this ConfigAuthZone.  # noqa: E501
        :type: bool
        """

        self._use_forwarders_for_subzones = use_forwarders_for_subzones

    @property
    def view(self):
        """Gets the view of this ConfigAuthZone.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The view of this ConfigAuthZone.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this ConfigAuthZone.

        The resource identifier.  # noqa: E501

        :param view: The view of this ConfigAuthZone.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def zone_authority(self):
        """Gets the zone_authority of this ConfigAuthZone.  # noqa: E501

        Optional. ZoneAuthority.  # noqa: E501

        :return: The zone_authority of this ConfigAuthZone.  # noqa: E501
        :rtype: ConfigZoneAuthority
        """
        return self._zone_authority

    @zone_authority.setter
    def zone_authority(self, zone_authority):
        """Sets the zone_authority of this ConfigAuthZone.

        Optional. ZoneAuthority.  # noqa: E501

        :param zone_authority: The zone_authority of this ConfigAuthZone.  # noqa: E501
        :type: ConfigZoneAuthority
        """

        self._zone_authority = zone_authority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigAuthZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigAuthZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
