# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigForwardersBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'forwarders': 'list[ConfigForwarder]',
        'forwarders_only': 'bool'
    }

    attribute_map = {
        'forwarders': 'forwarders',
        'forwarders_only': 'forwarders_only'
    }

    def __init__(self, forwarders=None, forwarders_only=None):  # noqa: E501
        """ConfigForwardersBlock - a model defined in Swagger"""  # noqa: E501

        self._forwarders = None
        self._forwarders_only = None
        self.discriminator = None

        if forwarders is not None:
            self.forwarders = forwarders
        if forwarders_only is not None:
            self.forwarders_only = forwarders_only

    @property
    def forwarders(self):
        """Gets the forwarders of this ConfigForwardersBlock.  # noqa: E501

        Optional. Field config for forwarders field from.  # noqa: E501

        :return: The forwarders of this ConfigForwardersBlock.  # noqa: E501
        :rtype: list[ConfigForwarder]
        """
        return self._forwarders

    @forwarders.setter
    def forwarders(self, forwarders):
        """Sets the forwarders of this ConfigForwardersBlock.

        Optional. Field config for forwarders field from.  # noqa: E501

        :param forwarders: The forwarders of this ConfigForwardersBlock.  # noqa: E501
        :type: list[ConfigForwarder]
        """

        self._forwarders = forwarders

    @property
    def forwarders_only(self):
        """Gets the forwarders_only of this ConfigForwardersBlock.  # noqa: E501

        Optional. Field config for forwarders_only field.  # noqa: E501

        :return: The forwarders_only of this ConfigForwardersBlock.  # noqa: E501
        :rtype: bool
        """
        return self._forwarders_only

    @forwarders_only.setter
    def forwarders_only(self, forwarders_only):
        """Sets the forwarders_only of this ConfigForwardersBlock.

        Optional. Field config for forwarders_only field.  # noqa: E501

        :param forwarders_only: The forwarders_only of this ConfigForwardersBlock.  # noqa: E501
        :type: bool
        """

        self._forwarders_only = forwarders_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigForwardersBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigForwardersBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
