# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigHost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'absolute_name': 'str',
        'address': 'str',
        'anycast_addresses': 'list[str]',
        'associated_server': 'ConfigHostAssociatedServer',
        'comment': 'str',
        'dfp': 'bool',
        'id': 'str',
        'name': 'str',
        'ophid': 'str',
        'protocol_absolute_name': 'str',
        'server': 'str',
        'site_id': 'str',
        'tags': 'TypesJSONValue'
    }

    attribute_map = {
        'absolute_name': 'absolute_name',
        'address': 'address',
        'anycast_addresses': 'anycast_addresses',
        'associated_server': 'associated_server',
        'comment': 'comment',
        'dfp': 'dfp',
        'id': 'id',
        'name': 'name',
        'ophid': 'ophid',
        'protocol_absolute_name': 'protocol_absolute_name',
        'server': 'server',
        'site_id': 'site_id',
        'tags': 'tags'
    }

    def __init__(self, absolute_name=None, address=None, anycast_addresses=None, associated_server=None, comment=None, dfp=None, id=None, name=None, ophid=None, protocol_absolute_name=None, server=None, site_id=None, tags=None):  # noqa: E501
        """ConfigHost - a model defined in Swagger"""  # noqa: E501

        self._absolute_name = None
        self._address = None
        self._anycast_addresses = None
        self._associated_server = None
        self._comment = None
        self._dfp = None
        self._id = None
        self._name = None
        self._ophid = None
        self._protocol_absolute_name = None
        self._server = None
        self._site_id = None
        self._tags = None
        self.discriminator = None

        if absolute_name is not None:
            self.absolute_name = absolute_name
        if address is not None:
            self.address = address
        if anycast_addresses is not None:
            self.anycast_addresses = anycast_addresses
        if associated_server is not None:
            self.associated_server = associated_server
        if comment is not None:
            self.comment = comment
        if dfp is not None:
            self.dfp = dfp
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.ophid = ophid
        if protocol_absolute_name is not None:
            self.protocol_absolute_name = protocol_absolute_name
        if server is not None:
            self.server = server
        if site_id is not None:
            self.site_id = site_id
        if tags is not None:
            self.tags = tags

    @property
    def absolute_name(self):
        """Gets the absolute_name of this ConfigHost.  # noqa: E501

        Read-write. Host FQDN.  # noqa: E501

        :return: The absolute_name of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._absolute_name

    @absolute_name.setter
    def absolute_name(self, absolute_name):
        """Sets the absolute_name of this ConfigHost.

        Read-write. Host FQDN.  # noqa: E501

        :param absolute_name: The absolute_name of this ConfigHost.  # noqa: E501
        :type: str
        """

        self._absolute_name = absolute_name

    @property
    def address(self):
        """Gets the address of this ConfigHost.  # noqa: E501

        Read-only. Host's primary IP Address.  # noqa: E501

        :return: The address of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConfigHost.

        Read-only. Host's primary IP Address.  # noqa: E501

        :param address: The address of this ConfigHost.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def anycast_addresses(self):
        """Gets the anycast_addresses of this ConfigHost.  # noqa: E501

        Read-only. Anycast address configured to the host. Order is not significant.  # noqa: E501

        :return: The anycast_addresses of this ConfigHost.  # noqa: E501
        :rtype: list[str]
        """
        return self._anycast_addresses

    @anycast_addresses.setter
    def anycast_addresses(self, anycast_addresses):
        """Sets the anycast_addresses of this ConfigHost.

        Read-only. Anycast address configured to the host. Order is not significant.  # noqa: E501

        :param anycast_addresses: The anycast_addresses of this ConfigHost.  # noqa: E501
        :type: list[str]
        """

        self._anycast_addresses = anycast_addresses

    @property
    def associated_server(self):
        """Gets the associated_server of this ConfigHost.  # noqa: E501

        Host associated server configuration.  # noqa: E501

        :return: The associated_server of this ConfigHost.  # noqa: E501
        :rtype: ConfigHostAssociatedServer
        """
        return self._associated_server

    @associated_server.setter
    def associated_server(self, associated_server):
        """Sets the associated_server of this ConfigHost.

        Host associated server configuration.  # noqa: E501

        :param associated_server: The associated_server of this ConfigHost.  # noqa: E501
        :type: ConfigHostAssociatedServer
        """

        self._associated_server = associated_server

    @property
    def comment(self):
        """Gets the comment of this ConfigHost.  # noqa: E501

        Read-only. Host description.  # noqa: E501

        :return: The comment of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ConfigHost.

        Read-only. Host description.  # noqa: E501

        :param comment: The comment of this ConfigHost.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def dfp(self):
        """Gets the dfp of this ConfigHost.  # noqa: E501

        Read-only. True if BloxOne DDI DNS and DFP are both active on the host. If so, BloxOne DDI DNS will augment recursive queries and forward them to DFP.  # noqa: E501

        :return: The dfp of this ConfigHost.  # noqa: E501
        :rtype: bool
        """
        return self._dfp

    @dfp.setter
    def dfp(self, dfp):
        """Sets the dfp of this ConfigHost.

        Read-only. True if BloxOne DDI DNS and DFP are both active on the host. If so, BloxOne DDI DNS will augment recursive queries and forward them to DFP.  # noqa: E501

        :param dfp: The dfp of this ConfigHost.  # noqa: E501
        :type: bool
        """

        self._dfp = dfp

    @property
    def id(self):
        """Gets the id of this ConfigHost.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigHost.

        The resource identifier.  # noqa: E501

        :param id: The id of this ConfigHost.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConfigHost.  # noqa: E501

        Read-only. Host display name.  # noqa: E501

        :return: The name of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigHost.

        Read-only. Host display name.  # noqa: E501

        :param name: The name of this ConfigHost.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ophid(self):
        """Gets the ophid of this ConfigHost.  # noqa: E501

        Read-only. On-Prem Host ID.  # noqa: E501

        :return: The ophid of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._ophid

    @ophid.setter
    def ophid(self, ophid):
        """Sets the ophid of this ConfigHost.

        Read-only. On-Prem Host ID.  # noqa: E501

        :param ophid: The ophid of this ConfigHost.  # noqa: E501
        :type: str
        """
        if ophid is None:
            raise ValueError("Invalid value for `ophid`, must not be `None`")  # noqa: E501

        self._ophid = ophid

    @property
    def protocol_absolute_name(self):
        """Gets the protocol_absolute_name of this ConfigHost.  # noqa: E501

        Read-only. Host FQDN in punycode.  # noqa: E501

        :return: The protocol_absolute_name of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._protocol_absolute_name

    @protocol_absolute_name.setter
    def protocol_absolute_name(self, protocol_absolute_name):
        """Sets the protocol_absolute_name of this ConfigHost.

        Read-only. Host FQDN in punycode.  # noqa: E501

        :param protocol_absolute_name: The protocol_absolute_name of this ConfigHost.  # noqa: E501
        :type: str
        """

        self._protocol_absolute_name = protocol_absolute_name

    @property
    def server(self):
        """Gets the server of this ConfigHost.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The server of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ConfigHost.

        The resource identifier.  # noqa: E501

        :param server: The server of this ConfigHost.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def site_id(self):
        """Gets the site_id of this ConfigHost.  # noqa: E501


        :return: The site_id of this ConfigHost.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ConfigHost.


        :param site_id: The site_id of this ConfigHost.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def tags(self):
        """Gets the tags of this ConfigHost.  # noqa: E501

        Read-only. Host tagging specifics.  # noqa: E501

        :return: The tags of this ConfigHost.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ConfigHost.

        Read-only. Host tagging specifics.  # noqa: E501

        :param tags: The tags of this ConfigHost.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigHost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigHost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
