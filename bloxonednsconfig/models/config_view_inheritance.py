# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigViewInheritance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_root_ns_block': 'ConfigInheritedCustomRootNSBlock',
        'dnssec_validation_block': 'ConfigInheritedDNSSECValidationBlock',
        'ecs_block': 'ConfigInheritedECSBlock',
        'forwarders_block': 'ConfigInheritedForwardersBlock',
        'lame_ttl': 'Inheritance2InheritedUInt32',
        'match_recursive_only': 'Inheritance2InheritedBool',
        'max_cache_ttl': 'Inheritance2InheritedUInt32',
        'max_negative_ttl': 'Inheritance2InheritedUInt32',
        'minimal_responses': 'Inheritance2InheritedBool',
        'query_acl': 'ConfigInheritedACLItems',
        'recursion_acl': 'ConfigInheritedACLItems',
        'recursion_enabled': 'Inheritance2InheritedBool',
        'transfer_acl': 'ConfigInheritedACLItems',
        'update_acl': 'ConfigInheritedACLItems',
        'use_forwarders_for_subzones': 'Inheritance2InheritedBool',
        'zone_authority': 'ConfigInheritedZoneAuthority'
    }

    attribute_map = {
        'custom_root_ns_block': 'custom_root_ns_block',
        'dnssec_validation_block': 'dnssec_validation_block',
        'ecs_block': 'ecs_block',
        'forwarders_block': 'forwarders_block',
        'lame_ttl': 'lame_ttl',
        'match_recursive_only': 'match_recursive_only',
        'max_cache_ttl': 'max_cache_ttl',
        'max_negative_ttl': 'max_negative_ttl',
        'minimal_responses': 'minimal_responses',
        'query_acl': 'query_acl',
        'recursion_acl': 'recursion_acl',
        'recursion_enabled': 'recursion_enabled',
        'transfer_acl': 'transfer_acl',
        'update_acl': 'update_acl',
        'use_forwarders_for_subzones': 'use_forwarders_for_subzones',
        'zone_authority': 'zone_authority'
    }

    def __init__(self, custom_root_ns_block=None, dnssec_validation_block=None, ecs_block=None, forwarders_block=None, lame_ttl=None, match_recursive_only=None, max_cache_ttl=None, max_negative_ttl=None, minimal_responses=None, query_acl=None, recursion_acl=None, recursion_enabled=None, transfer_acl=None, update_acl=None, use_forwarders_for_subzones=None, zone_authority=None):  # noqa: E501
        """ConfigViewInheritance - a model defined in Swagger"""  # noqa: E501

        self._custom_root_ns_block = None
        self._dnssec_validation_block = None
        self._ecs_block = None
        self._forwarders_block = None
        self._lame_ttl = None
        self._match_recursive_only = None
        self._max_cache_ttl = None
        self._max_negative_ttl = None
        self._minimal_responses = None
        self._query_acl = None
        self._recursion_acl = None
        self._recursion_enabled = None
        self._transfer_acl = None
        self._update_acl = None
        self._use_forwarders_for_subzones = None
        self._zone_authority = None
        self.discriminator = None

        if custom_root_ns_block is not None:
            self.custom_root_ns_block = custom_root_ns_block
        if dnssec_validation_block is not None:
            self.dnssec_validation_block = dnssec_validation_block
        if ecs_block is not None:
            self.ecs_block = ecs_block
        if forwarders_block is not None:
            self.forwarders_block = forwarders_block
        if lame_ttl is not None:
            self.lame_ttl = lame_ttl
        if match_recursive_only is not None:
            self.match_recursive_only = match_recursive_only
        if max_cache_ttl is not None:
            self.max_cache_ttl = max_cache_ttl
        if max_negative_ttl is not None:
            self.max_negative_ttl = max_negative_ttl
        if minimal_responses is not None:
            self.minimal_responses = minimal_responses
        if query_acl is not None:
            self.query_acl = query_acl
        if recursion_acl is not None:
            self.recursion_acl = recursion_acl
        if recursion_enabled is not None:
            self.recursion_enabled = recursion_enabled
        if transfer_acl is not None:
            self.transfer_acl = transfer_acl
        if update_acl is not None:
            self.update_acl = update_acl
        if use_forwarders_for_subzones is not None:
            self.use_forwarders_for_subzones = use_forwarders_for_subzones
        if zone_authority is not None:
            self.zone_authority = zone_authority

    @property
    def custom_root_ns_block(self):
        """Gets the custom_root_ns_block of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for custom_root_ns_block field from [Server] object.  # noqa: E501

        :return: The custom_root_ns_block of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedCustomRootNSBlock
        """
        return self._custom_root_ns_block

    @custom_root_ns_block.setter
    def custom_root_ns_block(self, custom_root_ns_block):
        """Sets the custom_root_ns_block of this ConfigViewInheritance.

        Optional. Field config for custom_root_ns_block field from [Server] object.  # noqa: E501

        :param custom_root_ns_block: The custom_root_ns_block of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedCustomRootNSBlock
        """

        self._custom_root_ns_block = custom_root_ns_block

    @property
    def dnssec_validation_block(self):
        """Gets the dnssec_validation_block of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for dnssec_validation_block field from [View] object.  # noqa: E501

        :return: The dnssec_validation_block of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedDNSSECValidationBlock
        """
        return self._dnssec_validation_block

    @dnssec_validation_block.setter
    def dnssec_validation_block(self, dnssec_validation_block):
        """Sets the dnssec_validation_block of this ConfigViewInheritance.

        Optional. Field config for dnssec_validation_block field from [View] object.  # noqa: E501

        :param dnssec_validation_block: The dnssec_validation_block of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedDNSSECValidationBlock
        """

        self._dnssec_validation_block = dnssec_validation_block

    @property
    def ecs_block(self):
        """Gets the ecs_block of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for ecs_block field from [View] object.  # noqa: E501

        :return: The ecs_block of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedECSBlock
        """
        return self._ecs_block

    @ecs_block.setter
    def ecs_block(self, ecs_block):
        """Sets the ecs_block of this ConfigViewInheritance.

        Optional. Field config for ecs_block field from [View] object.  # noqa: E501

        :param ecs_block: The ecs_block of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedECSBlock
        """

        self._ecs_block = ecs_block

    @property
    def forwarders_block(self):
        """Gets the forwarders_block of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for forwarders_block field from [View] object.  # noqa: E501

        :return: The forwarders_block of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedForwardersBlock
        """
        return self._forwarders_block

    @forwarders_block.setter
    def forwarders_block(self, forwarders_block):
        """Sets the forwarders_block of this ConfigViewInheritance.

        Optional. Field config for forwarders_block field from [View] object.  # noqa: E501

        :param forwarders_block: The forwarders_block of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedForwardersBlock
        """

        self._forwarders_block = forwarders_block

    @property
    def lame_ttl(self):
        """Gets the lame_ttl of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for lame_ttl field from [View] object.  # noqa: E501

        :return: The lame_ttl of this ConfigViewInheritance.  # noqa: E501
        :rtype: Inheritance2InheritedUInt32
        """
        return self._lame_ttl

    @lame_ttl.setter
    def lame_ttl(self, lame_ttl):
        """Sets the lame_ttl of this ConfigViewInheritance.

        Optional. Field config for lame_ttl field from [View] object.  # noqa: E501

        :param lame_ttl: The lame_ttl of this ConfigViewInheritance.  # noqa: E501
        :type: Inheritance2InheritedUInt32
        """

        self._lame_ttl = lame_ttl

    @property
    def match_recursive_only(self):
        """Gets the match_recursive_only of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for match_recursive_only field from [View] object.  # noqa: E501

        :return: The match_recursive_only of this ConfigViewInheritance.  # noqa: E501
        :rtype: Inheritance2InheritedBool
        """
        return self._match_recursive_only

    @match_recursive_only.setter
    def match_recursive_only(self, match_recursive_only):
        """Sets the match_recursive_only of this ConfigViewInheritance.

        Optional. Field config for match_recursive_only field from [View] object.  # noqa: E501

        :param match_recursive_only: The match_recursive_only of this ConfigViewInheritance.  # noqa: E501
        :type: Inheritance2InheritedBool
        """

        self._match_recursive_only = match_recursive_only

    @property
    def max_cache_ttl(self):
        """Gets the max_cache_ttl of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for max_cache_ttl field from [View] object.  # noqa: E501

        :return: The max_cache_ttl of this ConfigViewInheritance.  # noqa: E501
        :rtype: Inheritance2InheritedUInt32
        """
        return self._max_cache_ttl

    @max_cache_ttl.setter
    def max_cache_ttl(self, max_cache_ttl):
        """Sets the max_cache_ttl of this ConfigViewInheritance.

        Optional. Field config for max_cache_ttl field from [View] object.  # noqa: E501

        :param max_cache_ttl: The max_cache_ttl of this ConfigViewInheritance.  # noqa: E501
        :type: Inheritance2InheritedUInt32
        """

        self._max_cache_ttl = max_cache_ttl

    @property
    def max_negative_ttl(self):
        """Gets the max_negative_ttl of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for max_negative_ttl field from [View] object.  # noqa: E501

        :return: The max_negative_ttl of this ConfigViewInheritance.  # noqa: E501
        :rtype: Inheritance2InheritedUInt32
        """
        return self._max_negative_ttl

    @max_negative_ttl.setter
    def max_negative_ttl(self, max_negative_ttl):
        """Sets the max_negative_ttl of this ConfigViewInheritance.

        Optional. Field config for max_negative_ttl field from [View] object.  # noqa: E501

        :param max_negative_ttl: The max_negative_ttl of this ConfigViewInheritance.  # noqa: E501
        :type: Inheritance2InheritedUInt32
        """

        self._max_negative_ttl = max_negative_ttl

    @property
    def minimal_responses(self):
        """Gets the minimal_responses of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for minimal_responses field from [View] object.  # noqa: E501

        :return: The minimal_responses of this ConfigViewInheritance.  # noqa: E501
        :rtype: Inheritance2InheritedBool
        """
        return self._minimal_responses

    @minimal_responses.setter
    def minimal_responses(self, minimal_responses):
        """Sets the minimal_responses of this ConfigViewInheritance.

        Optional. Field config for minimal_responses field from [View] object.  # noqa: E501

        :param minimal_responses: The minimal_responses of this ConfigViewInheritance.  # noqa: E501
        :type: Inheritance2InheritedBool
        """

        self._minimal_responses = minimal_responses

    @property
    def query_acl(self):
        """Gets the query_acl of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for query_acl field from [View] object.  # noqa: E501

        :return: The query_acl of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedACLItems
        """
        return self._query_acl

    @query_acl.setter
    def query_acl(self, query_acl):
        """Sets the query_acl of this ConfigViewInheritance.

        Optional. Field config for query_acl field from [View] object.  # noqa: E501

        :param query_acl: The query_acl of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedACLItems
        """

        self._query_acl = query_acl

    @property
    def recursion_acl(self):
        """Gets the recursion_acl of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for recursion_acl field from [View] object.  # noqa: E501

        :return: The recursion_acl of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedACLItems
        """
        return self._recursion_acl

    @recursion_acl.setter
    def recursion_acl(self, recursion_acl):
        """Sets the recursion_acl of this ConfigViewInheritance.

        Optional. Field config for recursion_acl field from [View] object.  # noqa: E501

        :param recursion_acl: The recursion_acl of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedACLItems
        """

        self._recursion_acl = recursion_acl

    @property
    def recursion_enabled(self):
        """Gets the recursion_enabled of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for recursion_enabled field from [View] object.  # noqa: E501

        :return: The recursion_enabled of this ConfigViewInheritance.  # noqa: E501
        :rtype: Inheritance2InheritedBool
        """
        return self._recursion_enabled

    @recursion_enabled.setter
    def recursion_enabled(self, recursion_enabled):
        """Sets the recursion_enabled of this ConfigViewInheritance.

        Optional. Field config for recursion_enabled field from [View] object.  # noqa: E501

        :param recursion_enabled: The recursion_enabled of this ConfigViewInheritance.  # noqa: E501
        :type: Inheritance2InheritedBool
        """

        self._recursion_enabled = recursion_enabled

    @property
    def transfer_acl(self):
        """Gets the transfer_acl of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for transfer_acl field from [View] object.  # noqa: E501

        :return: The transfer_acl of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedACLItems
        """
        return self._transfer_acl

    @transfer_acl.setter
    def transfer_acl(self, transfer_acl):
        """Sets the transfer_acl of this ConfigViewInheritance.

        Optional. Field config for transfer_acl field from [View] object.  # noqa: E501

        :param transfer_acl: The transfer_acl of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedACLItems
        """

        self._transfer_acl = transfer_acl

    @property
    def update_acl(self):
        """Gets the update_acl of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for update_acl field from [View] object.  # noqa: E501

        :return: The update_acl of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedACLItems
        """
        return self._update_acl

    @update_acl.setter
    def update_acl(self, update_acl):
        """Sets the update_acl of this ConfigViewInheritance.

        Optional. Field config for update_acl field from [View] object.  # noqa: E501

        :param update_acl: The update_acl of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedACLItems
        """

        self._update_acl = update_acl

    @property
    def use_forwarders_for_subzones(self):
        """Gets the use_forwarders_for_subzones of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for use_forwarders_for_subzones field from [View] object.  # noqa: E501

        :return: The use_forwarders_for_subzones of this ConfigViewInheritance.  # noqa: E501
        :rtype: Inheritance2InheritedBool
        """
        return self._use_forwarders_for_subzones

    @use_forwarders_for_subzones.setter
    def use_forwarders_for_subzones(self, use_forwarders_for_subzones):
        """Sets the use_forwarders_for_subzones of this ConfigViewInheritance.

        Optional. Field config for use_forwarders_for_subzones field from [View] object.  # noqa: E501

        :param use_forwarders_for_subzones: The use_forwarders_for_subzones of this ConfigViewInheritance.  # noqa: E501
        :type: Inheritance2InheritedBool
        """

        self._use_forwarders_for_subzones = use_forwarders_for_subzones

    @property
    def zone_authority(self):
        """Gets the zone_authority of this ConfigViewInheritance.  # noqa: E501

        Optional. Field config for zone_authority field from [View] object.  # noqa: E501

        :return: The zone_authority of this ConfigViewInheritance.  # noqa: E501
        :rtype: ConfigInheritedZoneAuthority
        """
        return self._zone_authority

    @zone_authority.setter
    def zone_authority(self, zone_authority):
        """Sets the zone_authority of this ConfigViewInheritance.

        Optional. Field config for zone_authority field from [View] object.  # noqa: E501

        :param zone_authority: The zone_authority of this ConfigViewInheritance.  # noqa: E501
        :type: ConfigInheritedZoneAuthority
        """

        self._zone_authority = zone_authority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigViewInheritance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigViewInheritance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
