# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.    # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_sort_views': 'bool',
        'comment': 'str',
        'custom_root_ns': 'list[ConfigRootNS]',
        'custom_root_ns_enabled': 'bool',
        'dnssec_enable_validation': 'bool',
        'dnssec_enabled': 'bool',
        'dnssec_root_keys': 'list[ConfigTrustAnchor]',
        'dnssec_trust_anchors': 'list[ConfigTrustAnchor]',
        'dnssec_validate_expiry': 'bool',
        'ecs_enabled': 'bool',
        'ecs_forwarding': 'bool',
        'ecs_prefix_v4': 'int',
        'ecs_prefix_v6': 'int',
        'ecs_zones': 'list[ConfigECSZone]',
        'forwarders': 'list[ConfigForwarder]',
        'forwarders_only': 'bool',
        'id': 'str',
        'inheritance_sources': 'ConfigServerInheritance',
        'lame_ttl': 'int',
        'log_query_response': 'bool',
        'match_recursive_only': 'bool',
        'max_cache_ttl': 'int',
        'max_negative_ttl': 'int',
        'minimal_responses': 'bool',
        'name': 'str',
        'query_acl': 'list[ConfigACLItem]',
        'query_port': 'int',
        'recursion_acl': 'list[ConfigACLItem]',
        'recursion_enabled': 'bool',
        'resolver_query_timeout': 'int',
        'secondary_axfr_query_limit': 'int',
        'secondary_soa_query_limit': 'int',
        'tags': 'TypesJSONValue',
        'transfer_acl': 'list[ConfigACLItem]',
        'update_acl': 'list[ConfigACLItem]',
        'use_forwarders_for_subzones': 'bool',
        'views': 'list[ConfigDisplayView]'
    }

    attribute_map = {
        'auto_sort_views': 'auto_sort_views',
        'comment': 'comment',
        'custom_root_ns': 'custom_root_ns',
        'custom_root_ns_enabled': 'custom_root_ns_enabled',
        'dnssec_enable_validation': 'dnssec_enable_validation',
        'dnssec_enabled': 'dnssec_enabled',
        'dnssec_root_keys': 'dnssec_root_keys',
        'dnssec_trust_anchors': 'dnssec_trust_anchors',
        'dnssec_validate_expiry': 'dnssec_validate_expiry',
        'ecs_enabled': 'ecs_enabled',
        'ecs_forwarding': 'ecs_forwarding',
        'ecs_prefix_v4': 'ecs_prefix_v4',
        'ecs_prefix_v6': 'ecs_prefix_v6',
        'ecs_zones': 'ecs_zones',
        'forwarders': 'forwarders',
        'forwarders_only': 'forwarders_only',
        'id': 'id',
        'inheritance_sources': 'inheritance_sources',
        'lame_ttl': 'lame_ttl',
        'log_query_response': 'log_query_response',
        'match_recursive_only': 'match_recursive_only',
        'max_cache_ttl': 'max_cache_ttl',
        'max_negative_ttl': 'max_negative_ttl',
        'minimal_responses': 'minimal_responses',
        'name': 'name',
        'query_acl': 'query_acl',
        'query_port': 'query_port',
        'recursion_acl': 'recursion_acl',
        'recursion_enabled': 'recursion_enabled',
        'resolver_query_timeout': 'resolver_query_timeout',
        'secondary_axfr_query_limit': 'secondary_axfr_query_limit',
        'secondary_soa_query_limit': 'secondary_soa_query_limit',
        'tags': 'tags',
        'transfer_acl': 'transfer_acl',
        'update_acl': 'update_acl',
        'use_forwarders_for_subzones': 'use_forwarders_for_subzones',
        'views': 'views'
    }

    def __init__(self, auto_sort_views=None, comment=None, custom_root_ns=None, custom_root_ns_enabled=None, dnssec_enable_validation=None, dnssec_enabled=None, dnssec_root_keys=None, dnssec_trust_anchors=None, dnssec_validate_expiry=None, ecs_enabled=None, ecs_forwarding=None, ecs_prefix_v4=None, ecs_prefix_v6=None, ecs_zones=None, forwarders=None, forwarders_only=None, id=None, inheritance_sources=None, lame_ttl=None, log_query_response=None, match_recursive_only=None, max_cache_ttl=None, max_negative_ttl=None, minimal_responses=None, name=None, query_acl=None, query_port=None, recursion_acl=None, recursion_enabled=None, resolver_query_timeout=None, secondary_axfr_query_limit=None, secondary_soa_query_limit=None, tags=None, transfer_acl=None, update_acl=None, use_forwarders_for_subzones=None, views=None):  # noqa: E501
        """ConfigServer - a model defined in Swagger"""  # noqa: E501

        self._auto_sort_views = None
        self._comment = None
        self._custom_root_ns = None
        self._custom_root_ns_enabled = None
        self._dnssec_enable_validation = None
        self._dnssec_enabled = None
        self._dnssec_root_keys = None
        self._dnssec_trust_anchors = None
        self._dnssec_validate_expiry = None
        self._ecs_enabled = None
        self._ecs_forwarding = None
        self._ecs_prefix_v4 = None
        self._ecs_prefix_v6 = None
        self._ecs_zones = None
        self._forwarders = None
        self._forwarders_only = None
        self._id = None
        self._inheritance_sources = None
        self._lame_ttl = None
        self._log_query_response = None
        self._match_recursive_only = None
        self._max_cache_ttl = None
        self._max_negative_ttl = None
        self._minimal_responses = None
        self._name = None
        self._query_acl = None
        self._query_port = None
        self._recursion_acl = None
        self._recursion_enabled = None
        self._resolver_query_timeout = None
        self._secondary_axfr_query_limit = None
        self._secondary_soa_query_limit = None
        self._tags = None
        self._transfer_acl = None
        self._update_acl = None
        self._use_forwarders_for_subzones = None
        self._views = None
        self.discriminator = None

        if auto_sort_views is not None:
            self.auto_sort_views = auto_sort_views
        if comment is not None:
            self.comment = comment
        if custom_root_ns is not None:
            self.custom_root_ns = custom_root_ns
        if custom_root_ns_enabled is not None:
            self.custom_root_ns_enabled = custom_root_ns_enabled
        if dnssec_enable_validation is not None:
            self.dnssec_enable_validation = dnssec_enable_validation
        if dnssec_enabled is not None:
            self.dnssec_enabled = dnssec_enabled
        if dnssec_root_keys is not None:
            self.dnssec_root_keys = dnssec_root_keys
        if dnssec_trust_anchors is not None:
            self.dnssec_trust_anchors = dnssec_trust_anchors
        if dnssec_validate_expiry is not None:
            self.dnssec_validate_expiry = dnssec_validate_expiry
        if ecs_enabled is not None:
            self.ecs_enabled = ecs_enabled
        if ecs_forwarding is not None:
            self.ecs_forwarding = ecs_forwarding
        if ecs_prefix_v4 is not None:
            self.ecs_prefix_v4 = ecs_prefix_v4
        if ecs_prefix_v6 is not None:
            self.ecs_prefix_v6 = ecs_prefix_v6
        if ecs_zones is not None:
            self.ecs_zones = ecs_zones
        if forwarders is not None:
            self.forwarders = forwarders
        if forwarders_only is not None:
            self.forwarders_only = forwarders_only
        if id is not None:
            self.id = id
        if inheritance_sources is not None:
            self.inheritance_sources = inheritance_sources
        if lame_ttl is not None:
            self.lame_ttl = lame_ttl
        if log_query_response is not None:
            self.log_query_response = log_query_response
        if match_recursive_only is not None:
            self.match_recursive_only = match_recursive_only
        if max_cache_ttl is not None:
            self.max_cache_ttl = max_cache_ttl
        if max_negative_ttl is not None:
            self.max_negative_ttl = max_negative_ttl
        if minimal_responses is not None:
            self.minimal_responses = minimal_responses
        self.name = name
        if query_acl is not None:
            self.query_acl = query_acl
        if query_port is not None:
            self.query_port = query_port
        if recursion_acl is not None:
            self.recursion_acl = recursion_acl
        if recursion_enabled is not None:
            self.recursion_enabled = recursion_enabled
        if resolver_query_timeout is not None:
            self.resolver_query_timeout = resolver_query_timeout
        if secondary_axfr_query_limit is not None:
            self.secondary_axfr_query_limit = secondary_axfr_query_limit
        if secondary_soa_query_limit is not None:
            self.secondary_soa_query_limit = secondary_soa_query_limit
        if tags is not None:
            self.tags = tags
        if transfer_acl is not None:
            self.transfer_acl = transfer_acl
        if update_acl is not None:
            self.update_acl = update_acl
        if use_forwarders_for_subzones is not None:
            self.use_forwarders_for_subzones = use_forwarders_for_subzones
        if views is not None:
            self.views = views

    @property
    def auto_sort_views(self):
        """Gets the auto_sort_views of this ConfigServer.  # noqa: E501

        Optional. Controls manual/automatic views ordering. Defaults to true.  # noqa: E501

        :return: The auto_sort_views of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._auto_sort_views

    @auto_sort_views.setter
    def auto_sort_views(self, auto_sort_views):
        """Sets the auto_sort_views of this ConfigServer.

        Optional. Controls manual/automatic views ordering. Defaults to true.  # noqa: E501

        :param auto_sort_views: The auto_sort_views of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._auto_sort_views = auto_sort_views

    @property
    def comment(self):
        """Gets the comment of this ConfigServer.  # noqa: E501

        Optional. Comment for server configuration.  # noqa: E501

        :return: The comment of this ConfigServer.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ConfigServer.

        Optional. Comment for server configuration.  # noqa: E501

        :param comment: The comment of this ConfigServer.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def custom_root_ns(self):
        """Gets the custom_root_ns of this ConfigServer.  # noqa: E501

        Optional. List of custom root nameservers. The order does not matter. Error if empty while custom_root_ns_enabled is true. Error if there are duplicate items in the list. Defaults to empty.  # noqa: E501

        :return: The custom_root_ns of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigRootNS]
        """
        return self._custom_root_ns

    @custom_root_ns.setter
    def custom_root_ns(self, custom_root_ns):
        """Sets the custom_root_ns of this ConfigServer.

        Optional. List of custom root nameservers. The order does not matter. Error if empty while custom_root_ns_enabled is true. Error if there are duplicate items in the list. Defaults to empty.  # noqa: E501

        :param custom_root_ns: The custom_root_ns of this ConfigServer.  # noqa: E501
        :type: list[ConfigRootNS]
        """

        self._custom_root_ns = custom_root_ns

    @property
    def custom_root_ns_enabled(self):
        """Gets the custom_root_ns_enabled of this ConfigServer.  # noqa: E501

        Optional. True to use custom root nameservers instead of the default ones. The custom_root_ns is validated when enabled. Defaults to false.  # noqa: E501

        :return: The custom_root_ns_enabled of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._custom_root_ns_enabled

    @custom_root_ns_enabled.setter
    def custom_root_ns_enabled(self, custom_root_ns_enabled):
        """Sets the custom_root_ns_enabled of this ConfigServer.

        Optional. True to use custom root nameservers instead of the default ones. The custom_root_ns is validated when enabled. Defaults to false.  # noqa: E501

        :param custom_root_ns_enabled: The custom_root_ns_enabled of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._custom_root_ns_enabled = custom_root_ns_enabled

    @property
    def dnssec_enable_validation(self):
        """Gets the dnssec_enable_validation of this ConfigServer.  # noqa: E501

        Optional. True to perform DNSSEC validation. Ignored if dnssec_enabled is false. Defaults to true.  # noqa: E501

        :return: The dnssec_enable_validation of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._dnssec_enable_validation

    @dnssec_enable_validation.setter
    def dnssec_enable_validation(self, dnssec_enable_validation):
        """Sets the dnssec_enable_validation of this ConfigServer.

        Optional. True to perform DNSSEC validation. Ignored if dnssec_enabled is false. Defaults to true.  # noqa: E501

        :param dnssec_enable_validation: The dnssec_enable_validation of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._dnssec_enable_validation = dnssec_enable_validation

    @property
    def dnssec_enabled(self):
        """Gets the dnssec_enabled of this ConfigServer.  # noqa: E501

        Optional. Master toggle for all DNSSEC processing. Other dnssec_* configuration is unused if this is disabled. Defaults to true.  # noqa: E501

        :return: The dnssec_enabled of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._dnssec_enabled

    @dnssec_enabled.setter
    def dnssec_enabled(self, dnssec_enabled):
        """Sets the dnssec_enabled of this ConfigServer.

        Optional. Master toggle for all DNSSEC processing. Other dnssec_* configuration is unused if this is disabled. Defaults to true.  # noqa: E501

        :param dnssec_enabled: The dnssec_enabled of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._dnssec_enabled = dnssec_enabled

    @property
    def dnssec_root_keys(self):
        """Gets the dnssec_root_keys of this ConfigServer.  # noqa: E501

        Read-only. DNSSEC root keys. The root keys are not configurable. A default list is provided by cloud management and included here for config generation.  # noqa: E501

        :return: The dnssec_root_keys of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigTrustAnchor]
        """
        return self._dnssec_root_keys

    @dnssec_root_keys.setter
    def dnssec_root_keys(self, dnssec_root_keys):
        """Sets the dnssec_root_keys of this ConfigServer.

        Read-only. DNSSEC root keys. The root keys are not configurable. A default list is provided by cloud management and included here for config generation.  # noqa: E501

        :param dnssec_root_keys: The dnssec_root_keys of this ConfigServer.  # noqa: E501
        :type: list[ConfigTrustAnchor]
        """

        self._dnssec_root_keys = dnssec_root_keys

    @property
    def dnssec_trust_anchors(self):
        """Gets the dnssec_trust_anchors of this ConfigServer.  # noqa: E501

        Optional. DNSSEC trust anchors. Error if there are list items with duplicate (zone, sep, algorithm) combinations. Defaults to empty.  # noqa: E501

        :return: The dnssec_trust_anchors of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigTrustAnchor]
        """
        return self._dnssec_trust_anchors

    @dnssec_trust_anchors.setter
    def dnssec_trust_anchors(self, dnssec_trust_anchors):
        """Sets the dnssec_trust_anchors of this ConfigServer.

        Optional. DNSSEC trust anchors. Error if there are list items with duplicate (zone, sep, algorithm) combinations. Defaults to empty.  # noqa: E501

        :param dnssec_trust_anchors: The dnssec_trust_anchors of this ConfigServer.  # noqa: E501
        :type: list[ConfigTrustAnchor]
        """

        self._dnssec_trust_anchors = dnssec_trust_anchors

    @property
    def dnssec_validate_expiry(self):
        """Gets the dnssec_validate_expiry of this ConfigServer.  # noqa: E501

        Optional. True to reject expired DNSSEC keys. Ignored if either dnssec_enabled or dnssec_enable_validation is false. Defaults to true.  # noqa: E501

        :return: The dnssec_validate_expiry of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._dnssec_validate_expiry

    @dnssec_validate_expiry.setter
    def dnssec_validate_expiry(self, dnssec_validate_expiry):
        """Sets the dnssec_validate_expiry of this ConfigServer.

        Optional. True to reject expired DNSSEC keys. Ignored if either dnssec_enabled or dnssec_enable_validation is false. Defaults to true.  # noqa: E501

        :param dnssec_validate_expiry: The dnssec_validate_expiry of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._dnssec_validate_expiry = dnssec_validate_expiry

    @property
    def ecs_enabled(self):
        """Gets the ecs_enabled of this ConfigServer.  # noqa: E501

        Optional. True to enable EDNS client subnet for recursive queries. Other ecs_* fields are ignored if this field is not enabled. Defaults to false.  # noqa: E501

        :return: The ecs_enabled of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._ecs_enabled

    @ecs_enabled.setter
    def ecs_enabled(self, ecs_enabled):
        """Sets the ecs_enabled of this ConfigServer.

        Optional. True to enable EDNS client subnet for recursive queries. Other ecs_* fields are ignored if this field is not enabled. Defaults to false.  # noqa: E501

        :param ecs_enabled: The ecs_enabled of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._ecs_enabled = ecs_enabled

    @property
    def ecs_forwarding(self):
        """Gets the ecs_forwarding of this ConfigServer.  # noqa: E501

        Optional. True to enable ECS options in outbound queries. This functionality has additional overhead so it is disabled by default. Defaults to false.  # noqa: E501

        :return: The ecs_forwarding of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._ecs_forwarding

    @ecs_forwarding.setter
    def ecs_forwarding(self, ecs_forwarding):
        """Sets the ecs_forwarding of this ConfigServer.

        Optional. True to enable ECS options in outbound queries. This functionality has additional overhead so it is disabled by default. Defaults to false.  # noqa: E501

        :param ecs_forwarding: The ecs_forwarding of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._ecs_forwarding = ecs_forwarding

    @property
    def ecs_prefix_v4(self):
        """Gets the ecs_prefix_v4 of this ConfigServer.  # noqa: E501

        Optional. Maximum scope length for v4 ECS. Unsigned integer, min 1 max 24 Defaults to 24.  # noqa: E501

        :return: The ecs_prefix_v4 of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._ecs_prefix_v4

    @ecs_prefix_v4.setter
    def ecs_prefix_v4(self, ecs_prefix_v4):
        """Sets the ecs_prefix_v4 of this ConfigServer.

        Optional. Maximum scope length for v4 ECS. Unsigned integer, min 1 max 24 Defaults to 24.  # noqa: E501

        :param ecs_prefix_v4: The ecs_prefix_v4 of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._ecs_prefix_v4 = ecs_prefix_v4

    @property
    def ecs_prefix_v6(self):
        """Gets the ecs_prefix_v6 of this ConfigServer.  # noqa: E501

        Optional. Maximum scope length for v6 ECS. Unsigned integer, min 1 max 56 Defaults to 56.  # noqa: E501

        :return: The ecs_prefix_v6 of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._ecs_prefix_v6

    @ecs_prefix_v6.setter
    def ecs_prefix_v6(self, ecs_prefix_v6):
        """Sets the ecs_prefix_v6 of this ConfigServer.

        Optional. Maximum scope length for v6 ECS. Unsigned integer, min 1 max 56 Defaults to 56.  # noqa: E501

        :param ecs_prefix_v6: The ecs_prefix_v6 of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._ecs_prefix_v6 = ecs_prefix_v6

    @property
    def ecs_zones(self):
        """Gets the ecs_zones of this ConfigServer.  # noqa: E501

        Optional. List of zones where ECS queries may be sent. Error if empty while ecs_enabled is true. Error if there are duplicate FQDNs in the list. Defaults to empty.  # noqa: E501

        :return: The ecs_zones of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigECSZone]
        """
        return self._ecs_zones

    @ecs_zones.setter
    def ecs_zones(self, ecs_zones):
        """Sets the ecs_zones of this ConfigServer.

        Optional. List of zones where ECS queries may be sent. Error if empty while ecs_enabled is true. Error if there are duplicate FQDNs in the list. Defaults to empty.  # noqa: E501

        :param ecs_zones: The ecs_zones of this ConfigServer.  # noqa: E501
        :type: list[ConfigECSZone]
        """

        self._ecs_zones = ecs_zones

    @property
    def forwarders(self):
        """Gets the forwarders of this ConfigServer.  # noqa: E501

        Optional. List of forwarders. Error if empty while forwarders_only is true. Error if there are items in the list with duplicate addresses. Defaults to empty.  # noqa: E501

        :return: The forwarders of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigForwarder]
        """
        return self._forwarders

    @forwarders.setter
    def forwarders(self, forwarders):
        """Sets the forwarders of this ConfigServer.

        Optional. List of forwarders. Error if empty while forwarders_only is true. Error if there are items in the list with duplicate addresses. Defaults to empty.  # noqa: E501

        :param forwarders: The forwarders of this ConfigServer.  # noqa: E501
        :type: list[ConfigForwarder]
        """

        self._forwarders = forwarders

    @property
    def forwarders_only(self):
        """Gets the forwarders_only of this ConfigServer.  # noqa: E501

        Optional. True to only forward. Defaults to false.  # noqa: E501

        :return: The forwarders_only of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._forwarders_only

    @forwarders_only.setter
    def forwarders_only(self, forwarders_only):
        """Sets the forwarders_only of this ConfigServer.

        Optional. True to only forward. Defaults to false.  # noqa: E501

        :param forwarders_only: The forwarders_only of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._forwarders_only = forwarders_only

    @property
    def id(self):
        """Gets the id of this ConfigServer.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this ConfigServer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigServer.

        The resource identifier.  # noqa: E501

        :param id: The id of this ConfigServer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inheritance_sources(self):
        """Gets the inheritance_sources of this ConfigServer.  # noqa: E501

        Optional. Inheritance configuration.  # noqa: E501

        :return: The inheritance_sources of this ConfigServer.  # noqa: E501
        :rtype: ConfigServerInheritance
        """
        return self._inheritance_sources

    @inheritance_sources.setter
    def inheritance_sources(self, inheritance_sources):
        """Sets the inheritance_sources of this ConfigServer.

        Optional. Inheritance configuration.  # noqa: E501

        :param inheritance_sources: The inheritance_sources of this ConfigServer.  # noqa: E501
        :type: ConfigServerInheritance
        """

        self._inheritance_sources = inheritance_sources

    @property
    def lame_ttl(self):
        """Gets the lame_ttl of this ConfigServer.  # noqa: E501

        Optional. Seconds to cache lame server indications. Setting this to zero disables caching, which is not recommended. Unsigned integer, min 0 max 3600 (1h). Defaults to 600.  # noqa: E501

        :return: The lame_ttl of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._lame_ttl

    @lame_ttl.setter
    def lame_ttl(self, lame_ttl):
        """Sets the lame_ttl of this ConfigServer.

        Optional. Seconds to cache lame server indications. Setting this to zero disables caching, which is not recommended. Unsigned integer, min 0 max 3600 (1h). Defaults to 600.  # noqa: E501

        :param lame_ttl: The lame_ttl of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._lame_ttl = lame_ttl

    @property
    def log_query_response(self):
        """Gets the log_query_response of this ConfigServer.  # noqa: E501

        Optional. Control DNS query/response logging functionality. Defaults to true.  # noqa: E501

        :return: The log_query_response of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._log_query_response

    @log_query_response.setter
    def log_query_response(self, log_query_response):
        """Sets the log_query_response of this ConfigServer.

        Optional. Control DNS query/response logging functionality. Defaults to true.  # noqa: E501

        :param log_query_response: The log_query_response of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._log_query_response = log_query_response

    @property
    def match_recursive_only(self):
        """Gets the match_recursive_only of this ConfigServer.  # noqa: E501

        Optional. If true only recursive queries from matching clients access the view. Defaults to false.  # noqa: E501

        :return: The match_recursive_only of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._match_recursive_only

    @match_recursive_only.setter
    def match_recursive_only(self, match_recursive_only):
        """Sets the match_recursive_only of this ConfigServer.

        Optional. If true only recursive queries from matching clients access the view. Defaults to false.  # noqa: E501

        :param match_recursive_only: The match_recursive_only of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._match_recursive_only = match_recursive_only

    @property
    def max_cache_ttl(self):
        """Gets the max_cache_ttl of this ConfigServer.  # noqa: E501

        Optional. Seconds to cache positive responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 604800 (7d).  # noqa: E501

        :return: The max_cache_ttl of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._max_cache_ttl

    @max_cache_ttl.setter
    def max_cache_ttl(self, max_cache_ttl):
        """Sets the max_cache_ttl of this ConfigServer.

        Optional. Seconds to cache positive responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 604800 (7d).  # noqa: E501

        :param max_cache_ttl: The max_cache_ttl of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._max_cache_ttl = max_cache_ttl

    @property
    def max_negative_ttl(self):
        """Gets the max_negative_ttl of this ConfigServer.  # noqa: E501

        Optional. Seconds to cache negative responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 10800 (3h).  # noqa: E501

        :return: The max_negative_ttl of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._max_negative_ttl

    @max_negative_ttl.setter
    def max_negative_ttl(self, max_negative_ttl):
        """Sets the max_negative_ttl of this ConfigServer.

        Optional. Seconds to cache negative responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 10800 (3h).  # noqa: E501

        :param max_negative_ttl: The max_negative_ttl of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._max_negative_ttl = max_negative_ttl

    @property
    def minimal_responses(self):
        """Gets the minimal_responses of this ConfigServer.  # noqa: E501

        Optional. When enabled, the DNS server will only add records to the authority and additional data sections when they are required. Defaults to false.  # noqa: E501

        :return: The minimal_responses of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._minimal_responses

    @minimal_responses.setter
    def minimal_responses(self, minimal_responses):
        """Sets the minimal_responses of this ConfigServer.

        Optional. When enabled, the DNS server will only add records to the authority and additional data sections when they are required. Defaults to false.  # noqa: E501

        :param minimal_responses: The minimal_responses of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._minimal_responses = minimal_responses

    @property
    def name(self):
        """Gets the name of this ConfigServer.  # noqa: E501

        Required. Name of configuration.  # noqa: E501

        :return: The name of this ConfigServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigServer.

        Required. Name of configuration.  # noqa: E501

        :param name: The name of this ConfigServer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def query_acl(self):
        """Gets the query_acl of this ConfigServer.  # noqa: E501

        Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is unset. Defaults to empty.  # noqa: E501

        :return: The query_acl of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigACLItem]
        """
        return self._query_acl

    @query_acl.setter
    def query_acl(self, query_acl):
        """Sets the query_acl of this ConfigServer.

        Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is unset. Defaults to empty.  # noqa: E501

        :param query_acl: The query_acl of this ConfigServer.  # noqa: E501
        :type: list[ConfigACLItem]
        """

        self._query_acl = query_acl

    @property
    def query_port(self):
        """Gets the query_port of this ConfigServer.  # noqa: E501

        Optional. Source port for outbound DNS queries. When set to zero the port is unspecified and the implementation may randomize it using any available ports. Defaults to 0.  # noqa: E501

        :return: The query_port of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._query_port

    @query_port.setter
    def query_port(self, query_port):
        """Sets the query_port of this ConfigServer.

        Optional. Source port for outbound DNS queries. When set to zero the port is unspecified and the implementation may randomize it using any available ports. Defaults to 0.  # noqa: E501

        :param query_port: The query_port of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._query_port = query_port

    @property
    def recursion_acl(self):
        """Gets the recursion_acl of this ConfigServer.  # noqa: E501

        Optional. Clients must match this ACL to make recursive  queries. If this ACL is empty, then the query_acl will be used instead. Defaults to empty.  # noqa: E501

        :return: The recursion_acl of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigACLItem]
        """
        return self._recursion_acl

    @recursion_acl.setter
    def recursion_acl(self, recursion_acl):
        """Sets the recursion_acl of this ConfigServer.

        Optional. Clients must match this ACL to make recursive  queries. If this ACL is empty, then the query_acl will be used instead. Defaults to empty.  # noqa: E501

        :param recursion_acl: The recursion_acl of this ConfigServer.  # noqa: E501
        :type: list[ConfigACLItem]
        """

        self._recursion_acl = recursion_acl

    @property
    def recursion_enabled(self):
        """Gets the recursion_enabled of this ConfigServer.  # noqa: E501

        Optional. True to allow recursive DNS queries. Defaults to true.  # noqa: E501

        :return: The recursion_enabled of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._recursion_enabled

    @recursion_enabled.setter
    def recursion_enabled(self, recursion_enabled):
        """Sets the recursion_enabled of this ConfigServer.

        Optional. True to allow recursive DNS queries. Defaults to true.  # noqa: E501

        :param recursion_enabled: The recursion_enabled of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._recursion_enabled = recursion_enabled

    @property
    def resolver_query_timeout(self):
        """Gets the resolver_query_timeout of this ConfigServer.  # noqa: E501

        Optional. Seconds before a recursive query times out. Unsigned integer, min 1 max 30. Defaults to 30.  # noqa: E501

        :return: The resolver_query_timeout of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._resolver_query_timeout

    @resolver_query_timeout.setter
    def resolver_query_timeout(self, resolver_query_timeout):
        """Sets the resolver_query_timeout of this ConfigServer.

        Optional. Seconds before a recursive query times out. Unsigned integer, min 1 max 30. Defaults to 30.  # noqa: E501

        :param resolver_query_timeout: The resolver_query_timeout of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._resolver_query_timeout = resolver_query_timeout

    @property
    def secondary_axfr_query_limit(self):
        """Gets the secondary_axfr_query_limit of this ConfigServer.  # noqa: E501

        Optional. Maximum concurrent inbound AXFRs. When set to zero a host-dependent default will be used. Defaults to 0.  # noqa: E501

        :return: The secondary_axfr_query_limit of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._secondary_axfr_query_limit

    @secondary_axfr_query_limit.setter
    def secondary_axfr_query_limit(self, secondary_axfr_query_limit):
        """Sets the secondary_axfr_query_limit of this ConfigServer.

        Optional. Maximum concurrent inbound AXFRs. When set to zero a host-dependent default will be used. Defaults to 0.  # noqa: E501

        :param secondary_axfr_query_limit: The secondary_axfr_query_limit of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._secondary_axfr_query_limit = secondary_axfr_query_limit

    @property
    def secondary_soa_query_limit(self):
        """Gets the secondary_soa_query_limit of this ConfigServer.  # noqa: E501

        Optional. Maximum concurrent outbound SOA queries. When set to zero a host-dependent default will be used. Defaults to 0.  # noqa: E501

        :return: The secondary_soa_query_limit of this ConfigServer.  # noqa: E501
        :rtype: int
        """
        return self._secondary_soa_query_limit

    @secondary_soa_query_limit.setter
    def secondary_soa_query_limit(self, secondary_soa_query_limit):
        """Sets the secondary_soa_query_limit of this ConfigServer.

        Optional. Maximum concurrent outbound SOA queries. When set to zero a host-dependent default will be used. Defaults to 0.  # noqa: E501

        :param secondary_soa_query_limit: The secondary_soa_query_limit of this ConfigServer.  # noqa: E501
        :type: int
        """

        self._secondary_soa_query_limit = secondary_soa_query_limit

    @property
    def tags(self):
        """Gets the tags of this ConfigServer.  # noqa: E501


        :return: The tags of this ConfigServer.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ConfigServer.


        :param tags: The tags of this ConfigServer.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    @property
    def transfer_acl(self):
        """Gets the transfer_acl of this ConfigServer.  # noqa: E501

        Optional. Clients must match this ACL to receive zone transfers. Defaults to empty.  # noqa: E501

        :return: The transfer_acl of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigACLItem]
        """
        return self._transfer_acl

    @transfer_acl.setter
    def transfer_acl(self, transfer_acl):
        """Sets the transfer_acl of this ConfigServer.

        Optional. Clients must match this ACL to receive zone transfers. Defaults to empty.  # noqa: E501

        :param transfer_acl: The transfer_acl of this ConfigServer.  # noqa: E501
        :type: list[ConfigACLItem]
        """

        self._transfer_acl = transfer_acl

    @property
    def update_acl(self):
        """Gets the update_acl of this ConfigServer.  # noqa: E501

        Optional. Specifies which hosts are allowed to issue Dynamic DNS updates for auth zones of primary_type \"cloud\". Defaults to empty.  # noqa: E501

        :return: The update_acl of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigACLItem]
        """
        return self._update_acl

    @update_acl.setter
    def update_acl(self, update_acl):
        """Sets the update_acl of this ConfigServer.

        Optional. Specifies which hosts are allowed to issue Dynamic DNS updates for auth zones of primary_type \"cloud\". Defaults to empty.  # noqa: E501

        :param update_acl: The update_acl of this ConfigServer.  # noqa: E501
        :type: list[ConfigACLItem]
        """

        self._update_acl = update_acl

    @property
    def use_forwarders_for_subzones(self):
        """Gets the use_forwarders_for_subzones of this ConfigServer.  # noqa: E501

        Optional. Use default forwarders to resolve queries for subzones. Defaults to true.  # noqa: E501

        :return: The use_forwarders_for_subzones of this ConfigServer.  # noqa: E501
        :rtype: bool
        """
        return self._use_forwarders_for_subzones

    @use_forwarders_for_subzones.setter
    def use_forwarders_for_subzones(self, use_forwarders_for_subzones):
        """Sets the use_forwarders_for_subzones of this ConfigServer.

        Optional. Use default forwarders to resolve queries for subzones. Defaults to true.  # noqa: E501

        :param use_forwarders_for_subzones: The use_forwarders_for_subzones of this ConfigServer.  # noqa: E501
        :type: bool
        """

        self._use_forwarders_for_subzones = use_forwarders_for_subzones

    @property
    def views(self):
        """Gets the views of this ConfigServer.  # noqa: E501

        Optional. Ordered list of dns/display_view objects served by any of dns/hosts assigned to a particular DNS Configuration Profile. Automatically determined by backed. Allows re-ordering only.  # noqa: E501

        :return: The views of this ConfigServer.  # noqa: E501
        :rtype: list[ConfigDisplayView]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this ConfigServer.

        Optional. Ordered list of dns/display_view objects served by any of dns/hosts assigned to a particular DNS Configuration Profile. Automatically determined by backed. Allows re-ordering only.  # noqa: E501

        :param views: The views of this ConfigServer.  # noqa: E501
        :type: list[ConfigDisplayView]
        """

        self._views = views

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
